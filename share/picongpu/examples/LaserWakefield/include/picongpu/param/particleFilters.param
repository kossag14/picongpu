/* Copyright 2013-2018 Rene Widera
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/simulation_defines.hpp"
#include "picongpu/particles/filter/filter.def"
#include "picongpu/algorithms/KinEnergy.hpp"
#include "picongpu/traits/attribute/GetMass.hpp"

#ifndef PARAM_THRESHOLD_ENERGY_MEV
# define PARAM_THRESHOLD_ENERGY_MEV 10.0
#endif

#ifndef PARAM_PINHOLE_OPENING_ANGLE
    #define PARAM_PINHOLE_OPENING_ANGLE 10.0
#endif


namespace picongpu
{
namespace particles
{
namespace filter
{
    struct FunctorAboveThresholdEnergy
    {
        static constexpr char const * name = "aboveThresholdEnergy";

        template< typename T_Particle >
        HDINLINE bool operator()(
            T_Particle const & particle
        )
        {

            bool result = false;
            float3_X const mom = particle[ momentum_ ];
            float_X const absMom = math::abs( mom );
            float_X const weighting = particle[ weighting_ ];
            float_X const mass = attribute::getMass(weighting,particle);
            float_X const EnergyKin = KinEnergy<>( )(mom,mass);
                            
			// MeV -> J [SI] -> normiert
			
			float_X const thresholdEne_MeV = PARAM_THRESHOLD_ENERGY_MEV;
			float_X const thresholdEne_J = thresholdEne_MeV * 1.e3 * UNITCONV_keV_to_Joule; 
			float_X const thresholdEne = thresholdEne_J / UNIT_ENERGY;

			
			if( EnergyKin > thresholdEne)
            {
                    result = true;
            }
            return result;
        }
    };
    using AboveThresholdEnergy = generic::Free<
       FunctorAboveThresholdEnergy
    >;

        struct FunctorParticlesForwardPinhole
    {
        static constexpr char const * name = "forwardPinhole";

        template< typename T_Particle >
        HDINLINE bool operator()(
            T_Particle const & particle
        )
        {
            bool result = false;
            float3_X const mom = particle[ momentum_ ];
            float_X const absMom = math::abs( mom );

            if( absMom > float_X( 0. ) )
            {
                /* place detector in y direction, "infinite distance" to target,
                 * and opening angle in degree
                 */
                constexpr float_X openingAngle = PARAM_PINHOLE_OPENING_ANGLE * PI / 180.;
                float_X const dotP = mom.y() / absMom;
                float_X const degForw = math::acos( dotP );

                if( math::abs( degForw ) <= openingAngle * float_X( 0.5 ) )
                    result = true;
            }
            return result;
        }
    };
    using ParticlesForwardPinhole = generic::Free<
       FunctorParticlesForwardPinhole
    >;

    /** Plugins: collection of all available particle filters
     *
     * Create a list of all filters here that you want to use in plugins.
     *
     * Note: filter All is defined in picongpu/particles/filter/filter.def
     */
    using AllParticleFilters = MakeSeq_t<
        All,
        AboveThresholdEnergy,
        ParticlesForwardPinhole
    >;

} // namespace filter
} // namespace particles
} // namespace picongpu
